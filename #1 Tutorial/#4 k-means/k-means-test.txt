from sklearn.datasets.samples_generator import make_blobs
import matplotlib.pyplot as plt

X, y_true = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)  # 2차원 벡터 좌표 데이터 생성, row 300개
# plt.scatter(X[:, 0], X[:, 1], s=50)
# plt.show()

from sklearn.metrics import pairwise_distances_argmin
import numpy as np


def find_clusters(X, n_clusters, rseed=2):
    # 1. Randomly choose clusters
    rng = np.random.RandomState(rseed)  # 랜덤 객체 생성
    i = rng.permutation(X.shape[0])[:n_clusters]    # 300개의 초기 중심의 index data를 섞는다.
    centers = X[i]  # 초기 벡터

    while True:  # 2a. Assign labels based on closest center
        labels = pairwise_distances_argmin(X, centers)  # labels 배열에 데이터 값 할당

        # 2b. Find new centers from means of points
        new_centers = np.array([X[labels == i].mean(0)
                                for i in range(n_clusters)])
        # 2c. Check for convergence
        if np.all(centers == new_centers):
            break
        centers = new_centers

    return centers, labels


centers, labels = find_clusters(X, 4)
plt.scatter(X[:, 0], X[:, 1], c=labels, s=50, cmap='viridis')
plt.show()