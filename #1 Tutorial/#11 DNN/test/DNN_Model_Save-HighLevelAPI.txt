import tensorflow as tf
import numpy as np
import pandas as pd

# Load datasets.
iris = 'http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
#urlretrieve(iris) # save file locally
attributes = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]
input_attributes = ["sepal_length", "sepal_width", "petal_length", "petal_width"]
df = pd.read_csv(iris, sep=',')
df.columns = attributes
df["class"] = df["class"].map({"Iris-setosa": 0, "Iris-versicolor": 1, "Iris-virginica":2})
df = df.reindex(np.random.permutation(df.index))

train_size = int(len(df)*0.8)
train_set = df[:train_size]; print(len(train_set))
test_set = df[train_size:]; print(len(test_set))

x_train, x_test, y_train, y_test = train_set[input_attributes], test_set[input_attributes], train_set['class'], test_set['class']


# Build 3 layer DNN with 10, 20, 10 units respectively.
feature_columns = tf.contrib.learn.infer_real_valued_columns_from_input(x_train)
classifier = tf.contrib.learn.DNNClassifier(hidden_units=[30], n_classes=3, feature_columns=feature_columns, model_dir="C:/Temp/IRIS")

# print classifier.model_dir

# Fit model.
print("start fitting model...")
classifier.fit(x=x_train, y=y_train, steps=1000)
print("finished fitting model!!!")

# Evaluate accuracy.
accuracy_score = classifier.evaluate(x=x_test, y=y_test)["accuracy"]
print('Accuracy: {0:f}'.format(accuracy_score))

#Classify two new flower samples.
new_samples = np.array(
    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)
y = classifier.predict(new_samples)
for x in y:
    print(x)
